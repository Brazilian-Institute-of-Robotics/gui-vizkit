#! /usr/bin/env ruby

require 'vizkit'
require 'orocos'
require 'optparse'
require 'rock/bundle'

@show_all = false
@proxy = true
@clean = false
Bundles.public_logs = false 

parser = OptionParser.new do |opt|
    opt.banner = "rock-display [--host hostname] task_name[.port_name] [task_name[.port_name]]"
    opt.on('--host=HOSTNAME', String, "the corba nameserver we should contact") do |name|
        Orocos::CORBA.name_service = name
    end
    opt.on('-a','--all',"Display all tasks") do
        @show_all = true
    end
    opt.on('--noproxy',"Do not use a port proxy between the task inspector and other orocos tasks") do
        @proxy = false
    end
    opt.on('--debug',"Show debug information") do
        Vizkit.logger.level = Logger::INFO
        Bundles.public_logs = true
    end
    opt.on('-c','--clean',"Removes dangling corba tasks from the name service.") do
        @clean = true
    end
    opt.on('-M', '--maxMessageSize SIZE', 
           'maximum size of a message transported via corba (e.g. 2145, 3K, 3.5M, 0.1G)') do |size|
        size_match = /^(\d+(\.\d+)?)([MGK])?$/.match(size)
        if !size_match
            Vizkit::warn "cannot parse #{size} for a message size value"
            return
        end
        factors = {'K' => 1024, 'M' => 1024**2, 'G'=> 1024**3}
        factor = size_match[3] ? factors[size_match[3]] : 1
        value =  (size_match[1].to_f * factor).to_i
        Vizkit::info "set corba max message size to #{value}"
        Orocos::CORBA::max_message_size=value
    end
    opt.on('--help') do
        puts parser
        exit 0
    end
end

def corba_error
    Vizkit.error "Corba error. Maybe Orocos is not initialized"
    Vizkit.error "or the corba name service is answering on a wrong network interface."
    Vizkit.error "Try to reset the nameserver and to disable all virtual network interfaces."
end


remaining = parser.parse(ARGV)
task_inspector = nil
widget = nil

begin
    service = Orocos::Nameservice.enable :CORBAPROXY
    Bundles.initialize
    service.start
    Orocos::CORBA.cleanup if @clean
rescue Orocos::CORBAError => e
    Vizkit.error "Corba name service is not answering. Cannot start rock-display."
    Vizkit.error ""
    corba_error
    exit 1
end

Orocos::CORBA.call_timeout = 5000
Orocos::CORBA.connect_timeout = 5000

if remaining.empty?
  @timer = Qt::Timer.new
  task_inspector ||= Vizkit.default_loader.TaskInspector
  raise "Cannot find plugin TaskInspector" unless task_inspector

  task_inspector.enable_tooling=@show_all

  #check for new tasks every 5 seconds 
  @error_counter = 0
  refresh = Proc.new do 
      begin
      if !service.reachable?
          raise Orocos::CORBAError
      end
      service.names.each do |name|
          task = Orocos::Nameservice.resolve_proxy name, :raise => false
          task_inspector.config(task,:cleanup_nameservice =>@clean)
      end
      @error_counter = 0
      rescue Orocos::CORBAError => e
          if @error_counter > 15
              Vizkit.error "Corba name service is not answering. Cannot update display. ... keep on trying "
              Vizkit.error ""
              corba_error
          end
          @error_counter += 1
      end
  end
  @timer.connect SIGNAL('timeout()') do 
      refresh.call
  end
  refresh.call
  @timer.start(1000)
else
    remaining.each do |spec|
        task_name, port_name = spec.split('.')
        if !task_name 
            Vizkit.warn "Wrong parameter. Ignoring empty task name"
            next 
        end
        task = Orocos::Nameservice.resolve_proxy task_name,:raise => false
        if !port_name || !task.reachable?
            task_inspector ||= Vizkit.default_loader.TaskInspector
            task_inspector.enable_tooling= true
            task_inspector.config(task)
        else
            widget = Vizkit.default_loader.create_plugin_for(task.port(port_name),:display,nil,true)
            if widget
                Vizkit.connect_port_to task,port_name,widget
                widget.show
            else
                Vizkit.warn "Cannot find a display widget for #{port_name}"
            end
        end
    end
    task_inspector.force_update = true if task_inspector
end

if task_inspector
    task_inspector.show
elsif !widget
    puts parser
    exit 1
end
Vizkit.exec

